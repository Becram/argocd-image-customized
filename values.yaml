argo-cd:
  installCRDs: false
  global:
    image:
      repository: 395092651780.dkr.ecr.ap-southeast-1.amazonaws.com/argocd
      tag: main-161371be
  dex:
    enabled: false
  controller:
    serviceAccount:
      create: true
      name: argocd-application-controller
      ## Annotations applied to created service account
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::395092651780:role/argocd-application-controller-eksserviceaccount-role"
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true
    resources:
      requests:
        memory: "512Mi"
        cpu: "128m"
      limits:
        memory: "2048Mi"
        cpu: "1024m"
    nodeSelector:
      workload: "monitoring-deployment"
    tolerations:
      - key: "workload"
        operator: "Equal"
        value: "monitoring-deployment"
        effect: "NoSchedule"
    replicas: 2
    enableStatefulSet: true
    extraArgs:
    - --repo-server-timeout-seconds
    - "600"
    - --status-processors
    - "50"
    - --operation-processors
    - "30"
    metrics:
      enabled: true
      # service:
        # servicePort: 8082 #default port
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
        namespace: kube-prometheus-stack
        interval: 30s
        scrapeTimeout: 10s
      rules:
        enabled: true
        additionalLabels:
          # required 2 of this label for prometheus to use
          release: kube-prometheus-stack
          app: kube-prometheus-stack
        namespace: kube-prometheus-stack
        spec:
        - alert: ArgoCDInOutOfSync
          annotations:
            message: ArgoCD application stuck in OutOfSync more than 10 minutes
            description: ArgoCD application stuck in OutOfSync more than 10 minutes
            summary: 'ArgoCD Application {{ $labels.name }} OutOfSync longer than 10 minutes'
          expr: argocd_app_info{sync_status=~"OutOfSync"} > 0
          for: 10m
          labels:
            severity: warning
        - alert: ArgoCDProgressing
          annotations:
            message: ArgoCD application stuck in Progressing more than 10 minutes
            description: ArgoCD application stuck in Progressing more than 10 minutes
            summary: 'ArgoCD Application {{ $labels.name }} Progressing longer than 10 minutes'
          expr: argocd_app_info{health_status=~"Progressing"} > 0
          for: 10m
          labels:
            severity: warning
        - alert: ArgoCDDegraded
          annotations:
            message: ArgoCD application stuck in Degraded more than 10 minutes
            description: ArgoCD application stuck in Degraded more than 10 minutes
            summary: 'ArgoCD Application {{ $labels.name }} Degraded longer than 10 minutes'
          expr: argocd_app_info{health_status=~"Degraded"} > 0
          for: 10m
          labels:
            severity: warning
        - alert: ArgoCDMissing
          annotations:
            message: ArgoCD application stuck in Missing more than 10 minutes
            description: ArgoCD application stuck in Missing more than 10 minutes
            summary: 'ArgoCD Application {{ $labels.name }} Missing longer than 10 minutes'
          expr: argocd_app_info{health_status=~"Missing"} > 0
          for: 10m
          labels:
            severity: warning
        - alert: ArgoCDUnknown
          annotations:
            message: ArgoCD application stuck in Unknown more than 10 minutes
            description: ArgoCD application stuck in Unknown more than 10 minutes
            summary: 'ArgoCD Application {{ $labels.name }} Unknown longer than 10 minutes'
          expr: argocd_app_info{health_status=~"Unknown"} > 0
          for: 10m
          labels:
            severity: warning
  repoServer:
    serviceAccount:
      create: true
      name: argocd-repo-server
      ## Annotations applied to created service account
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::395092651780:role/argocd-repo-server-eksserviceaccount-role"
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true
    nodeSelector:
      workload: "monitoring-deployment"
    tolerations:
      - key: "workload"
        operator: "Equal"
        value: "monitoring-deployment"
        effect: "NoSchedule"
    autoscaling:
      enabled: true
      minReplicas: 4
      maxReplicas: 10
      targetCPUUtilizationPercentage: 90
      targetMemoryUtilizationPercentage: 90
    resources:
      requests:
        memory: "256Mi"
        cpu: "128m"
      limits:
        memory: "2048Mi"
        cpu: "1024m"
    env:
    - name: ARGOCD_EXEC_TIMEOUT
      value: "5m"
    - name: XDG_CONFIG_HOME
      value: /.config
    volumes:
    - name: custom-tools
      emptyDir: {}
    initContainers:
    - name: install-ksops
      image: viaductoss/ksops:v2.5.7
      command: ["/bin/sh", "-c"]
      args:
        - echo "Installing KSOPS...";
          export PKG_NAME=ksops;
          mv ${PKG_NAME}.so /custom-tools/;
          mv $GOPATH/bin/kustomize /custom-tools/;
          echo "Done.";
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
    volumeMounts:
    - mountPath: /usr/local/bin/kustomize
      name: custom-tools
      subPath: kustomize
    # Verify this matches a XDG_CONFIG_HOME=/.config env variable
    - mountPath: /.config/kustomize/plugin/viaduct.ai/v1/ksops/ksops.so
      name: custom-tools
      subPath: ksops.so
    metrics:
      enabled: true
      # service:
        # servicePort: 8082 #default port
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
        namespace: kube-prometheus-stack
        interval: 30s
        scrapeTimeout: 10s

  server:
    replicas: 2
    nodeSelector:
      workload: "monitoring-deployment"
    tolerations:
      - key: "workload"
        operator: "Equal"
        value: "monitoring-deployment"
        effect: "NoSchedule"

    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75

    resources:
      requests:
        memory: "256Mi"
        cpu: "128m"
      limits:
        memory: "1024Mi"
        cpu: "512m"
    extraArgs:
      - --insecure
    service:
      type: NodePort
    serviceAccount:
      create: true
      name: argocd
      ## Annotations applied to created service account
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::395092651780:role/argocd-eksserviceaccount-role"
      ## Automount API credentials for the Service Account
      automountServiceAccountToken: true
    metrics:
      enabled: true
      # service:
        # servicePort: 8082 #default port
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
        namespace: kube-prometheus-stack
        interval: 30s
        scrapeTimeout: 10s

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
      hosts:
        - deploy.zipmex.com
      paths:
        - /
    configEnabled: true
    rbacConfig:
      policy.default: role:readonly
      policy.csv: |
        p, role:org-admin, applications, *, */*, allow
        p, role:org-admin, applications, get, */*, allow
        p, role:org-admin, applications, create, */*, allow
        p, role:org-admin, applications, update, */*, allow
        p, role:org-admin, applications, delete, */*, allow
        p, role:org-admin, applications, sync, */*, allow
        p, role:org-admin, applications, override, */*, allow
        p, role:org-admin, applications, action/*, */*, allow
        p, role:org-admin, certificates, create, *, allow
        p, role:org-admin, certificates, update, *, allow
        p, role:org-admin, certificates, delete, *, allow
        p, role:org-admin, certificates, get, *, allow
        p, role:org-admin, clusters, create, *, allow
        p, role:org-admin, clusters, update, *, allow
        p, role:org-admin, clusters, delete, *, allow
        p, role:org-admin, clusters, get, *, allow
        p, role:org-admin, repositories, create, *, allow
        p, role:org-admin, repositories, update, *, allow
        p, role:org-admin, repositories, delete, *, allow
        p, role:org-admin, repositories, get, *, allow
        p, role:org-admin, projects, create, *, allow
        p, role:org-admin, projects, update, *, allow
        p, role:org-admin, projects, delete, *, allow
        p, role:org-admin, projects, get, *, allow
        p, role:org-admin, accounts, update, *, allow
        p, role:org-admin, accounts, get, *, allow
        p, role:org-admin, gpgkeys, create, *, allow
        p, role:org-admin, gpgkeys, get, *, allow
        p, role:org-admin, gpgkeys, delete, *, allow

        g, /ArgoCDAdmins, role:org-admin
    config:
      kustomize.buildOptions: "--enable-alpha-plugins"
      url: https://deploy.zipmex.com
      application.instanceLabelKey: argocd.argoproj.io/instance
#      users.anonymous.enabled: "true"
      oidc.config: |
        name: Keycloak
        issuer: https://authen.zipmex.com/auth/realms/Zipmex
        clientID: argocd-prod
        clientSecret: $keycloakclientSecret
        requestedScopes: ["openid", "profile", "email", "groups"]
      repositories: |
        - type: helm
          name: argo-cd
          url: https://argoproj.github.io/argo-helm
        - type: helm
          name: stable
          url: https://charts.helm.sh/stable
        - type: helm
          name: backend-app
          url: https://charts.zipmex.dev
        - type: git
          url: https://github.com/zipmex/exchange-helm-charts.git
          passwordSecret:
            key: password
            name: argocd-secret
          usernameSecret:
            key: username
            name: argocd-secret
        - type: git
          url: https://github.com/zipmex/k8s-exchange-staging.git
          passwordSecret:
            key: password
            name: argocd-secret
          usernameSecret:
            key: username
            name: argocd-secret
        - type: git
          url: https://github.com/zipmex/main-k8s.git
          passwordSecret:
            key: password
            name: argocd-secret
          usernameSecret:
            key: username
            name: argocd-secret

